Как пассажир я хочу иметь возможность простого и интуитивного выбора нужного этажа для того,
чтобы не изучать язык управления лифтом

Тесты
+ после нажатия на кнопку вызова переадресовать вызов модели
+ после нажатия на кнопку при успешном завершении - сказать форме
+ лифт должен стартовать при старте приложения если он установлен
+ если лифт не существует при старте - не паниковать
+ лифт должен стартовать сразу после установки
+ если лифта нет, при вызове бросать ошибку
+ если вызвали с несуществующего этажа - ошибка
+ корректно остановить лифт при остановке
+ при создании лифта бросить эксепшн если есть (нельзя 2 раза стартануть)
-ЕПИК> синхронизировать состояние лифта с ЮИ:
+ Начальное состояние - мы снаружи
+ Начальное состояние - построить панель индикаторов
+ Начальное состояние - построить панель кнопок
+ Начальное состояние - нету дверей, кнопок - ничего пока не синхронизируемся
+ Синхронизировались с сервером - убрали вейт панель
+ Начальное состояние - зарегестрировали себя слушателем серверных апдейтов
+ Убрали себя из заинтересованных в серверных апдейтах при стопе
+ После стопа и инициализации форма переходит в начальное состояние
+ После стопа и инициализации регистрируемся листенером
>синхронизация. таблица значений. Состояние лифта получаем от сервера: дверь открыта, номер этажа
> элементы управления:
-> кнопка вызова (доступна/не доступна), находится снаружи, прятать пока не будем для простоты
-> кнопка входа (доступна/не доступна), (нажата/отжата) находится на панели кнопок лифта
-> панель кнопок лифта (видима/не видима, доступна/не доступна)
+ Дверь открыта, наш этаж, мы снаружи - можем только войти и нажать на вызов:
++ кнопка вызова-доступна, кнопка входа - доступна/отжата, панель-видна/не доступна
+ Дверь открыта, не наш этаж, мы снаружи - можем только вызвать:
++ кнопка вызова-доступна, кнопка входа - не доступна/отжата, панель-не видна/не доступна
+ Дверь открыта, мы внутри - можем только нажать на этаж или выйти
++ кнопка вызова - не доступна, кнопка входа - доступна/нажата, панель - видна/доступна
+ Выходим из лифта -> дверь открыта, наш этаж, снаружи
+ enterbutton clicked when not our floor
+ enter button clicked when door is closed
+ Дверь закрыта, мы снаружи - только вызов (этаж не важен)
++ кнопка вызова - доступна, кнопка входа - недосупна/отжата, панель - не видна/не доступна
+ Дверь закрыта, мы внутри - только нажать на этаж (этаж не важен)
++ кнопка вызова - не доступна, кнопка входа - недоступна/нажата,  панель - видна/доступна

+ Текущий этаж может меняться только когда внутри
+ Индикация этажей меняется
+ Можем выйти если приехали на другой этаж
+ Могу зайти обратно в лифт после того как вышел
+ getFloorsCount - возвращать количество этажей
+ getFloorsCount - exception если лифт не установлен
+ по нажатию кнопки выбора сообщать серверу
+ если нажимаем кнопку выбора этажа снаружи - ошибка
+ бага: CurrentThread не может быть null после десериализации
+ Все равно просится Lift вместо - Elevator, так короче ))

EPIC>- лифт должен ездить (не понятно пока как реализовать, реализую при многопользовательской истории)
+ задержку добавить для движения между этажами
+ индикатор этажа
+ баг: лифт двигается с открытыми дверьми

+ Получать обновления с сервера (таймер)
EPIC>- реализовать ЮИ формы лифта
+ onShow/onHide евенты генерит ScreenFlowManager. Это должно быть единообразно чтобы не делать проверок в nextScreen
+ реализовать серверную логику синхронизации
+ реализовать клиентский таймер
+ Нельзя расчитывать только на индикацию. Надо спрашивать при синхронизации. Когда приходит событие atFloor дверь может быть закрыта.
+ баг: приехали на 2-й этаж, вышли нажали кнопку вызова - лифт уехал на 1-й - написать тест
+ Добавить время на задержку открытия/закрытия двери
+ Добавить время на задержку между открытием и закрытием двери
+ Вынести время задержек на форму редактирования
EPIC> как пользователь лифта я хочу видеть какие кнопки пассажиры нажали


+ Лифт или элеватор - надо следовать одному названию везде!
+ Диалоговое окно : пользователь должен оставаться до тех пор пока не нажмет ОК (передать листенер в LiftDialogBox)
+ AsyncCallback - обработка ошибок одинакова должна быть везде - сделать суперкласс
+ isElevatorExists - не нужен уже

долги
- с моком надо что-то делать - каждый раз реализовывать метод руками влом - Mockito
- Переписать тесты на Lift чтобы они использовали MockFloorListener вместо door.assertXXX
- lift.getDoor() - пованивает, стоит внести в лифт?
EPIC> добавить события для формы лифта: дверь открыть/дверь закрыть:
   Сейчас момент открытия двери вычисляется в ЮИ по значениям visible/not visible у кнопок,
   поэтому дверь начинает закрываться только когда лифт уже реально поехал
- При событии "дверь открыть" отжать кнопку вызова
- кнопка вызова - нельзя самому ее отжать (вызвал - жди)
- отобразить, что дверь закрывается когда пассажир внутри кабины:
   в ЮИ на обработке событий "дверь открыть/дверь закрыть" рисовать процесс открытия/закрытия двери.
   Если внутри кабины, то рисовать "отображение" двери, если снаружи, то и "отображение" и реальную
- лифт - многопоточное приложение, нужно локи расставить (хз как тестить)-> Актеры нас спасут
- RealDoor setDoorSpeed - просится сервис currentThread чтобы не делать Thread.sleep
- лифт может обслуживать не более 25 этажей (ограничение индикации, больше будет некрасиво)
EPIC> Добавить подсветку выбранного этажа.

Пока нет идей как улучшить:
- Написать нормальные тесты на LiftService - getLiftState. Из-за многопоточности тесты будут сложные, а логики мало. Актеры помогут?
- Стартовать лифт после создания - нет теста
- При старте сервиса вызывать лифт на 1й этаж - нет теста
