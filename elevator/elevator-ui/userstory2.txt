Как пассажир я хочу иметь возможность простого и интуитивного выбора нужного этажа для того,
чтобы не изучать язык управления лифтом

Тесты
+ после нажатия на кнопку вызова переадресовать вызов модели
+ после нажатия на кнопку при успешном завершении - сказать форме
+ лифт должен стартовать при старте приложения если он установлен
+ если лифт не существует при старте - не паниковать
+ лифт должен стартовать сразу после установки
+ если лифта нет, при вызове бросать ошибку
+ если вызвали с несуществующего этажа - ошибка
+ корректно остановить лифт при остановке
+ при создании лифта бросить эксепшн если есть (нельзя 2 раза стартануть)
-ЕПИК> синхронизировать состояние лифта с ЮИ:
+ Начальное состояние - мы снаружи
+ Начальное состояние - построить панель индикаторов
+ Начальное состояние - построить панель кнопок
+ Начальное состояние - нету дверей, кнопок - ничего пока не синхронизируемся
+ Синхронизировались с сервером - убрали вейт панель
+ Начальное состояние - зарегестрировали себя слушателем серверных апдейтов
+ Убрали себя из заинтересованных в серверных апдейтах при стопе
+ После стопа и инициализации форма переходит в начальное состояние
+ После стопа и инициализации регистрируемся листенером
>синхронизация. таблица значений. Состояние лифта получаем от сервера: дверь открыта, номер этажа
> элементы управления:
-> кнопка вызова (доступна/не доступна), находится снаружи, прятать пока не будем для простоты
-> кнопка входа (доступна/не доступна), (нажата/отжата) находится на панели кнопок лифта
-> панель кнопок лифта (видима/не видима, доступна/не доступна)
+ Дверь открыта, наш этаж, мы снаружи - можем только войти и нажать на вызов:
++ кнопка вызова-доступна, кнопка входа - доступна/отжата, панель-видна/не доступна
+ Дверь открыта, не наш этаж, мы снаружи - можем только вызвать:
++ кнопка вызова-доступна, кнопка входа - не доступна/отжата, панель-не видна/не доступна
+ Дверь открыта, мы внутри - можем только нажать на этаж или выйти
++ кнопка вызова - не доступна, кнопка входа - доступна/нажата, панель - видна/доступна
+ Выходим из лифта -> дверь открыта, наш этаж, снаружи
+ enterbutton clicked when not our floor
+ enter button clicked when door is closed
+ Дверь закрыта, мы снаружи - только вызов (этаж не важен)
++ кнопка вызова - доступна, кнопка входа - недосупна/отжата, панель - не видна/не доступна
+ Дверь закрыта, мы внутри - только нажать на этаж (этаж не важен)
++ кнопка вызова - не доступна, кнопка входа - недоступна/нажата,  панель - видна/доступна

+ Текущий этаж может меняться только когда внутри
+ Индикация этажей меняется
+ Можем выйти если приехали на другой этаж
+ Могу зайти обратно в лифт после того как вышел
- getFloorsCount - возвращать количество этажей
- getFloorsCount - exception если лифт не установлен
- багаЬ CurrentThread не может быть null после десериализации
+ Все равно просится Lift вместо - Elevator, так короче ))

EPIC>- лифт должен ездить (не понятно пока как реализовать, реализую при многопользовательской истории)
- лифт - многопоточное приложение, нужно локи расставить (хз как тестить)
- задержку добавить между закрытием и открытием дверей (moveLift - в многопольз. версии)
+ задержку добавить для движения между этажами
+ индикатор этажа
+ баг: лифт двигается с открытыми дверьми

долги
+ Лифт или элеватор - надо следовать одному названию везде!
- с моком надо что-то делать - каждый раз реализовывать метод руками влом
- ScreenFlowManager везде инициализируется в тестах - вынести
+ AsyncCallback - обработка ошибок одинакова должна быть везде - сделать суперкласс
- isElevatorExists - не нужен уже
- Переписать тесты на Lift чтобы они использовали MockFloorListener вместо door.assertXXX
